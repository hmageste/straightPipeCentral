/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "";
    object      caseSettings;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

initial
{
    U               uniform (100 0 0);
    p               uniform 0;
    nut             uniform 0;
    k               uniform 15.27;
    epsilon         uniform 307.3;
}

// explict boundary conditions
inlet
{
    U
    {
        type            fixedValue;
        value           $:initial.U;
    }

    p
    {
        type            zeroGradient;
    }

    k
    {
        type            fixedValue;
        value           $:initial.k;
    }

    epsilon
    {
        type            fixedValue;
        value           $:initial.epsilon;
    }

    nut
    {
        type            calculated;
        value           $:initial.nut;
    }
}

outlet
{
    U
    {
        type            inletOutlet;
        inletValue      $:initial.U;
        value           $:initial.U;
    }

    p
    {
        type            fixedValue;
        value           $:initial.p;
    }

    k
    {
        type            zeroGradient;
    }

    /*k
    {
        type            inletOutlet;
        inletValue      $:initial.k;
        value           $:initial.k;
    }*/

    epsilon
    {
        type            zeroGradient;
    }

    /*
    epsilon
    {
        type            inletOutlet;
        inletValue      $:initial.epsilon;
        value           $:initial.epsilon;
    }*/

    nut
    {
        type            calculated;
        value           $:initial.nut;
    }
}

wall
{
    U
    {
        type            noSlip;
    }

    p
    {
        type            zeroGradient;
    }

    k
    {
        type            kLowReWallFunction;
        value           uniform 1e-10;
    }

    epsilon
    {
        type            epsilonWallFunction;
        value           uniform 0;
    }

    nut
    {
        type            nutkWallFunction;
        value           uniform 0;
    }
}

// ************************************************************************* //
